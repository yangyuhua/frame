<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="${catalina.base}/logs" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	<!-- 项目名称 -->
	<property name="preName" value="frame" />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<appender name="file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/${preName}j_%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。 
			<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> 
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern> <minIndex>1</minIndex> 
			<maxIndex>3</maxIndex> </rollingPolicy> -->
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 <triggeringPolicy 
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> <maxFileSize>5MB</maxFileSize> 
			</triggeringPolicy> -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	
	<!-- root级别 DEBUG -->
	<root level="WARN">
		<!-- 控制台输出 -->
		<appender-ref ref="STDOUT" />
		<!-- 文件输出 -->
		<appender-ref ref="file" />
	</root>

	<!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->
	<logger name="org.springframework" level="WARN"/>
	<logger name="org.springframework.jdbc" level="WARN" />
	<logger name="org.apache" level="WARN" />
	<logger name="org.hibernate" level="WARN" />
	<logger name="net.sf.ehcache" level="WARN" />
	<!-- spring jdbc sql log -->
	<logger name="org.springframework.jdbc.core.JdbcTemplate" level="WARN" />
</configuration>  